__Note: SVProgressHUD now uses Automatic Reference Counting (ARC). Find the last MRC commit on the "last-mrc":https://github.com/samvermette/SVProgressHUD/tree/last-mrc branch.__

SVProgressHUD is an easy-to-use, clean and lightweight progress HUD for iOS. It's a simplified and prettified alternative to the popular "MBProgressHUD":https://github.com/jdg/MBProgressHUD. Its fade in/out animations are highly inspired on Lauren Britcher's HUD in Tweetie for iOS. The success and error icons are from "Glyphish":http://glyphish.com/.


!http://f.cl.ly/items/231Y2A0t0t1J0B0r3N0p/svprogresshud3.png!

SVProgressHUD features:

* very simple singleton convenience methods (@[SVProgressHUD show]@, @[SVProgressHUD dismiss]@, etc.)
* optional loading, success and error status messages
* automatic positioning based on device type, orientation and keyboard visibility
* optionally disable user interactions while the HUD is showing with the @maskType@ parameter
* optionally use your own 28x28 px UIImage in the HUD

h2. Installation

* Drag the @SVProgressHUD/SVProgressHUD@ folder into your project. 
* Add the *QuartzCore* framework to your project. 

__If you plan on using SVProgressHUD in a lot of places inside your app, I recommend importing it directly inside your prefix file.__

h2. Usage

(see sample Xcode project in @/Demo@)

SVProgressHUD is created as a singleton (i.e. it doesn't need to be explicitly allocated and instantiated; you directly call @[SVProgressHUD method]@) and can be shown using one of the following convenience/class methods:

<pre>
+ (void)show;
+ (void)showWithStatus:(NSString*)status;
+ (void)showWithStatus:(NSString*)status maskType:(SVProgressHUDMaskType)maskType;
+ (void)showWithMaskType:(SVProgressHUDMaskType)maskType;
+ (void)showWithStatus:(NSString *)status image:(UIImage *)image;
</pre>

You dismiss it using one of these:

<pre>
+ (void)dismiss;
+ (void)dismissWithSuccess:(NSString*)successString;
+ (void)dismissWithSuccess:(NSString*)successString afterDelay:(NSTimeInterval)seconds;
+ (void)dismissWithError:(NSString*)errorString;
+ (void)dismissWithError:(NSString*)errorString afterDelay:(NSTimeInterval)seconds;
</pre>

If you're using SVProgressHUD to show the status of a many-steps operation, you can also change the HUD status __while__ it's showing with:

<pre>
+ (void)setStatus:(NSString*)string;
</pre>

Additionally, you can use SVProgressHUD to display a simple confirmation/success HUD using:

<pre>
+ (void)showSuccessWithStatus:(NSString*)string;
</pre>

h3. SVProgressHUDMaskType

You can optionally disable user interactions and dim the background UI using the @maskType@ property:

<pre>
enum {
    SVProgressHUDMaskTypeNone = 1, // allow user interactions, don't dim background UI (default)
    SVProgressHUDMaskTypeClear, // disable user interactions, don't dim background UI
    SVProgressHUDMaskTypeBlack, // disable user interactions, dim background UI with 50% translucent black
    SVProgressHUDMaskTypeGradient // disable user interactions, dim background UI with translucent radial gradient (a-la-alertView)
};
</pre>

h2. Credits

SVProgressHUD is brought to you by "Sam Vermette":http://samvermette.com and "contributors to the project":https://github.com/samvermette/SVProgressHUD/contributors. If you have feature suggestions or bug reports, feel free to help out by sending pull requests or by "creating new issues":https://github.com/samvermette/SVProgressHUD/issues/new. If you're using SVProgressHUD in your project, attribution would be nice.
